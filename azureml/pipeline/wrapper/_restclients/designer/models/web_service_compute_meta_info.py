# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class WebServiceComputeMetaInfo(Model):
    """WebServiceComputeMetaInfo.

    :param node_count:
    :type node_count: int
    :param is_ssl_enabled:
    :type is_ssl_enabled: bool
    :param aks_not_found:
    :type aks_not_found: bool
    :param cluster_purpose:
    :type cluster_purpose: str
    :param public_ip_address:
    :type public_ip_address: str
    :param vm_size:
    :type vm_size: str
    :param location:
    :type location: str
    :param provisioning_state:
    :type provisioning_state: str
    :param state:
    :type state: str
    :param os_type:
    :type os_type: str
    :param id:
    :type id: str
    :param name:
    :type name: str
    :param created_by_studio:
    :type created_by_studio: bool
    :param is_gpu_type:
    :type is_gpu_type: bool
    :param resource_id:
    :type resource_id: str
    :param compute_type:
    :type compute_type: str
    """

    _attribute_map = {
        'node_count': {'key': 'nodeCount', 'type': 'int'},
        'is_ssl_enabled': {'key': 'isSslEnabled', 'type': 'bool'},
        'aks_not_found': {'key': 'aksNotFound', 'type': 'bool'},
        'cluster_purpose': {'key': 'clusterPurpose', 'type': 'str'},
        'public_ip_address': {'key': 'publicIpAddress', 'type': 'str'},
        'vm_size': {'key': 'vmSize', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'created_by_studio': {'key': 'createdByStudio', 'type': 'bool'},
        'is_gpu_type': {'key': 'isGpuType', 'type': 'bool'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(WebServiceComputeMetaInfo, self).__init__(**kwargs)
        self.node_count = kwargs.get('node_count', None)
        self.is_ssl_enabled = kwargs.get('is_ssl_enabled', None)
        self.aks_not_found = kwargs.get('aks_not_found', None)
        self.cluster_purpose = kwargs.get('cluster_purpose', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.vm_size = kwargs.get('vm_size', None)
        self.location = kwargs.get('location', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.state = kwargs.get('state', None)
        self.os_type = kwargs.get('os_type', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.created_by_studio = kwargs.get('created_by_studio', None)
        self.is_gpu_type = kwargs.get('is_gpu_type', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.compute_type = kwargs.get('compute_type', None)
